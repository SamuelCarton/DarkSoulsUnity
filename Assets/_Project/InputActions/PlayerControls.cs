//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/InputActions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Palyer Mouvement"",
            ""id"": ""067e0c38-c87f-464b-8035-6e177c743e94"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8b1cfe2b-ce34-4a93-a06a-b15454cf673e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c4624cfb-d22e-4d06-8775-7a87485d5618"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f592e4e9-e430-4401-8772-460f2950c21d"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6e648afd-c9b1-47d3-bd92-03b4c3fc7f18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c9e4a2be-ec0a-4453-8de4-fb254004935e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fad206b0-d49a-4e88-9ded-744506df0b77"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""04c63236-6699-470e-b41b-1cb8c2d3d6d9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fcb5d7a3-0be1-4291-86e0-c313c9920064"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""146ef4d5-571e-4988-85a2-f0b9d262920a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Palyer Mouvement
        m_PalyerMouvement = asset.FindActionMap("Palyer Mouvement", throwIfNotFound: true);
        m_PalyerMouvement_Mouvement = m_PalyerMouvement.FindAction("Mouvement", throwIfNotFound: true);
        m_PalyerMouvement_Camera = m_PalyerMouvement.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Palyer Mouvement
    private readonly InputActionMap m_PalyerMouvement;
    private IPalyerMouvementActions m_PalyerMouvementActionsCallbackInterface;
    private readonly InputAction m_PalyerMouvement_Mouvement;
    private readonly InputAction m_PalyerMouvement_Camera;
    public struct PalyerMouvementActions
    {
        private @PlayerControls m_Wrapper;
        public PalyerMouvementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_PalyerMouvement_Mouvement;
        public InputAction @Camera => m_Wrapper.m_PalyerMouvement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_PalyerMouvement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PalyerMouvementActions set) { return set.Get(); }
        public void SetCallbacks(IPalyerMouvementActions instance)
        {
            if (m_Wrapper.m_PalyerMouvementActionsCallbackInterface != null)
            {
                @Mouvement.started -= m_Wrapper.m_PalyerMouvementActionsCallbackInterface.OnMouvement;
                @Mouvement.performed -= m_Wrapper.m_PalyerMouvementActionsCallbackInterface.OnMouvement;
                @Mouvement.canceled -= m_Wrapper.m_PalyerMouvementActionsCallbackInterface.OnMouvement;
                @Camera.started -= m_Wrapper.m_PalyerMouvementActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PalyerMouvementActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PalyerMouvementActionsCallbackInterface.OnCamera;
            }
            m_Wrapper.m_PalyerMouvementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouvement.started += instance.OnMouvement;
                @Mouvement.performed += instance.OnMouvement;
                @Mouvement.canceled += instance.OnMouvement;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
            }
        }
    }
    public PalyerMouvementActions @PalyerMouvement => new PalyerMouvementActions(this);
    public interface IPalyerMouvementActions
    {
        void OnMouvement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
}
